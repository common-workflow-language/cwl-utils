{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "InputArraySchema": {
            "additionalProperties": false,
            "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputArraySchema",
            "properties": {
                "doc": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A documentation string for this object, or an array of strings which should be concatenated."
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/InputRecordSchema"
                        },
                        {
                            "$ref": "#/definitions/InputEnumSchema"
                        },
                        {
                            "$ref": "#/definitions/InputArraySchema"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/InputRecordSchema"
                                    },
                                    {
                                        "$ref": "#/definitions/InputEnumSchema"
                                    },
                                    {
                                        "$ref": "#/definitions/InputArraySchema"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Defines the type of the array elements."
                },
                "label": {
                    "description": "A short, human-readable label of this object.",
                    "type": "string"
                },
                "name": {
                    "description": "The identifier for this type",
                    "type": "string"
                },
                "type": {
                    "const": "array",
                    "description": "Must be `array`",
                    "type": "string"
                }
            },
            "required": [
                "items",
                "type"
            ],
            "type": "object"
        },
        "InputBinding": {
            "additionalProperties": false,
            "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputBinding",
            "properties": {
                "loadContents": {
                    "description": "Use of `loadContents` in `InputBinding` is deprecated.\nPreserved for v1.0 backwards compatibility.  Will be removed in\nCWL v2.0.  Use `InputParameter.loadContents` instead.",
                    "type": "boolean"
                }
            },
            "required": [],
            "type": "object"
        },
        "InputEnumSchema": {
            "additionalProperties": false,
            "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputEnumSchema",
            "properties": {
                "doc": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A documentation string for this object, or an array of strings which should be concatenated."
                },
                "label": {
                    "description": "A short, human-readable label of this object.",
                    "type": "string"
                },
                "name": {
                    "description": "The identifier for this type",
                    "type": "string"
                },
                "symbols": {
                    "description": "Defines the set of valid symbols.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "type": {
                    "const": "enum",
                    "description": "Must be `enum`",
                    "type": "string"
                }
            },
            "required": [
                "symbols",
                "type"
            ],
            "type": "object"
        },
        "InputRecordField": {
            "additionalProperties": false,
            "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordField",
            "properties": {
                "doc": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A documentation string for this object, or an array of strings which should be concatenated."
                },
                "format": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\nThis must be one or more IRIs of concept nodes\nthat represents file formats which are allowed as input to this\nparameter, preferably defined within an ontology.  If no ontology is\navailable, file formats may be tested by exact match."
                },
                "label": {
                    "description": "A short, human-readable label of this object.",
                    "type": "string"
                },
                "loadContents": {
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\nIf true, the file (or each file in the array) must be a UTF-8\ntext file 64 KiB or smaller, and the implementation must read\nthe entire contents of the file (or file array) and place it\nin the `contents` field of the File object for use by\nexpressions.  If the size of the file is greater than 64 KiB,\nthe implementation must raise a fatal error.",
                    "type": "boolean"
                },
                "loadListing": {
                    "description": "Only valid when `type: Directory` or is an array of `items: Directory`.\n\nSpecify the desired behavior for loading the `listing` field of\na Directory object for use by expressions.\n\nThe order of precedence for loadListing is:\n\n  1. `loadListing` on an individual parameter\n  2. Inherited from `LoadListingRequirement`\n  3. By default: `no_listing`",
                    "enum": [
                        "deep_listing",
                        "no_listing",
                        "shallow_listing"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "The name of the field",
                    "type": "string"
                },
                "secondaryFiles": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/SecondaryFileSchema"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/SecondaryFileSchema"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\nProvides a pattern or expression specifying files or\ndirectories that should be included alongside the primary\nfile.  Secondary files may be required or optional.  When not\nexplicitly specified, secondary files specified for `inputs`\nare required and `outputs` are optional.  An implementation\nmust include matching Files and Directories in the\n`secondaryFiles` property of the primary file.  These Files\nand Directories must be transferred and staged alongside the\nprimary file.  An implementation may fail workflow execution\nif a required secondary file does not exist.\n\nIf the value is an expression, the value of `self` in the expression\nmust be the primary input or output File object to which this binding\napplies.  The `basename`, `nameroot` and `nameext` fields must be\npresent in `self`.  For `CommandLineTool` outputs the `path` field must\nalso be present.  The expression must return a filename string relative\nto the path to the primary File, a File or Directory object with either\n`path` or `location` and `basename` fields set, or an array consisting\nof strings or File or Directory objects.  It is legal to reference an\nunchanged File or Directory object taken from input as a secondaryFile.\nThe expression may return \"null\" in which case there is no secondaryFile\nfrom that expression.\n\nTo work on non-filename-preserving storage systems, portable tool\ndescriptions should avoid constructing new values from `location`, but\nshould construct relative references using `basename` or `nameroot`\ninstead.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path."
                },
                "streamable": {
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\nA value of `true` indicates that the file is read or written\nsequentially without seeking.  An implementation may use this flag to\nindicate whether it is valid to stream file contents using a named\npipe.  Default: `false`.",
                    "type": "boolean"
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/InputRecordSchema"
                        },
                        {
                            "$ref": "#/definitions/InputEnumSchema"
                        },
                        {
                            "$ref": "#/definitions/InputArraySchema"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/definitions/InputRecordSchema"
                                    },
                                    {
                                        "$ref": "#/definitions/InputEnumSchema"
                                    },
                                    {
                                        "$ref": "#/definitions/InputArraySchema"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The field type"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "type": "object"
        },
        "InputRecordSchema": {
            "additionalProperties": false,
            "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#InputRecordSchema",
            "properties": {
                "doc": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "A documentation string for this object, or an array of strings which should be concatenated."
                },
                "fields": {
                    "description": "Defines the fields of the record.",
                    "items": {
                        "$ref": "#/definitions/InputRecordField"
                    },
                    "type": "array"
                },
                "label": {
                    "description": "A short, human-readable label of this object.",
                    "type": "string"
                },
                "name": {
                    "description": "The identifier for this type",
                    "type": "string"
                },
                "type": {
                    "const": "record",
                    "description": "Must be `record`",
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        },
        "SecondaryFileSchema": {
            "additionalProperties": false,
            "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#SecondaryFileSchema\n\nSecondary files are specified using the following micro-DSL for secondary files:\n\n* If the value is a string, it is transformed to an object with two fields\n  `pattern` and `required`\n* By default, the value of `required` is `null`\n  (this indicates default behavior, which may be based on the context)\n* If the value ends with a question mark `?` the question mark is\n  stripped off and the value of the field `required` is set to `False`\n* The remaining value is assigned to the field `pattern`\n\nFor implementation details and examples, please see\n[this section](SchemaSalad.html#Domain_Specific_Language_for_secondary_files)\nin the Schema Salad specification.",
            "properties": {
                "pattern": {
                    "description": "Provides a pattern or expression specifying files or directories that\nshould be included alongside the primary file.\n\nIf the value is an expression, the value of `self` in the\nexpression must be the primary input or output File object to\nwhich this binding applies.  The `basename`, `nameroot` and\n`nameext` fields must be present in `self`.  For\n`CommandLineTool` inputs the `location` field must also be\npresent.  For `CommandLineTool` outputs the `path` field must\nalso be present.  If secondary files were included on an input\nFile object as part of the Process invocation, they must also\nbe present in `secondaryFiles` on `self`.\n\nThe expression must return either: a filename string relative\nto the path to the primary File, a File or Directory object\n(`class: File` or `class: Directory`) with either `location`\n(for inputs) or `path` (for outputs) and `basename` fields\nset, or an array consisting of strings or File or Directory\nobjects as previously described.\n\nIt is legal to use `location` from a File or Directory object\npassed in as input, including `location` from secondary files\non `self`.  If an expression returns a File object with the\nsame `location` but a different `basename` as a secondary file\nthat was passed in, the expression result takes precedence.\nSetting the basename with an expression this way affects the\n`path` where the secondary file will be staged to in the\nCommandLineTool.\n\nThe expression may return \"null\" in which case there is no\nsecondary file from that expression.\n\nTo work on non-filename-preserving storage systems, portable\ntool descriptions should treat `location` as an\n[opaque identifier](#opaque-strings) and avoid constructing new\nvalues from `location`, but should construct relative references\nusing `basename` or `nameroot` instead, or propagate `location`\nfrom defined inputs.\n\nIf a value in `secondaryFiles` is a string that is not an expression,\nit specifies that the following pattern should be applied to the path\nof the primary file to yield a filename relative to the primary File:\n\n  1. If string ends with `?` character, remove the last `?` and mark\n    the resulting secondary file as optional.\n  2. If string begins with one or more caret `^` characters, for each\n    caret, remove the last file extension from the path (the last\n    period `.` and all following characters).  If there are no file\n    extensions, the path is unchanged.\n  3. Append the remainder of the string to the end of the file path.",
                    "type": "string"
                },
                "required": {
                    "description": "An implementation must not fail workflow execution if `required` is\nset to `false` and the expected secondary file does not exist.\nDefault value for `required` field is `true` for secondary files on\ninput and `false` for secondary files on output.",
                    "type": [
                        "string",
                        "boolean"
                    ]
                }
            },
            "required": [
                "pattern"
            ],
            "type": "object"
        },
        "File": {
            "additionalProperties": false,
            "description": "Represents a file (or group of files when `secondaryFiles` is provided) that\nwill be accessible by tools using standard POSIX file system call API such as\nopen(2) and read(2).\n\nFiles are represented as objects with `class` of `File`.  File objects have\na number of properties that provide metadata about the file.\n\nThe `location` property of a File is a URI that uniquely identifies the\nfile.  Implementations must support the `file://` URI scheme and may support\nother schemes such as `http://` and `https://`.  The value of `location` may also be a\nrelative reference, in which case it must be resolved relative to the URI\nof the document it appears in.  Alternately to `location`, implementations\nmust also accept the `path` property on File, which must be a filesystem\npath available on the same host as the CWL runner (for inputs) or the\nruntime environment of a command line tool execution (for command line tool\noutputs).\n\nIf no `location` or `path` is specified, a file object must specify\n`contents` with the UTF-8 text content of the file.  This is a \"file\nliteral\".  File literals do not correspond to external resources, but are\ncreated on disk with `contents` with when needed for executing a tool.\nWhere appropriate, expressions can return file literals to define new files\non a runtime.  The maximum size of `contents` is 64 kilobytes.\n\nThe `basename` property defines the filename on disk where the file is\nstaged.  This may differ from the resource name.  If not provided,\n`basename` must be computed from the last path part of `location` and made\navailable to expressions.\n\nThe `secondaryFiles` property is a list of File or Directory objects that\nmust be staged in the same directory as the primary file.  It is an error\nfor file names to be duplicated in `secondaryFiles`.\n\nThe `size` property is the size in bytes of the File.  It must be computed\nfrom the resource and made available to expressions.  The `checksum` field\ncontains a cryptographic hash of the file content for use it verifying file\ncontents.  Implementations may, at user option, enable or disable\ncomputation of the `checksum` field for performance or other reasons.\nHowever, the ability to compute output checksums is required to pass the\nCWL conformance test suite.\n\nWhen executing a CommandLineTool, the files and secondary files may be\nstaged to an arbitrary directory, but must use the value of `basename` for\nthe filename.  The `path` property must be file path in the context of the\ntool execution runtime (local to the compute node, or within the executing\ncontainer).  All computed properties should be available to expressions.\nFile literals also must be staged and `path` must be set.\n\nWhen collecting CommandLineTool outputs, `glob` matching returns file paths\n(with the `path` property) and the derived properties. This can all be\nmodified by `outputEval`.  Alternately, if the file `cwl.output.json` is\npresent in the output, `outputBinding` is ignored.\n\nFile objects in the output must provide either a `location` URI or a `path`\nproperty in the context of the tool execution runtime (local to the compute\nnode, or within the executing container).\n\nWhen evaluating an ExpressionTool, file objects must be referenced via\n`location` (the expression tool does not have access to files on disk so\n`path` is meaningless) or as file literals.  It is legal to return a file\nobject with an existing `location` but a different `basename`.  The\n`loadContents` field of ExpressionTool inputs behaves the same as on\nCommandLineTool inputs, however it is not meaningful on the outputs.\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.",
            "properties": {
                "basename": {
                    "description": "The base name of the file, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.",
                    "type": "string"
                },
                "checksum": {
                    "description": "Optional hash code for validating file integrity.  Currently, must be in the form\n\"sha1$ + hexadecimal string\" using the SHA-1 algorithm.",
                    "type": "string"
                },
                "class": {
                    "const": "File",
                    "description": "Must be `File` to indicate this object describes a file.",
                    "type": "string"
                },
                "contents": {
                    "description": "File contents literal.\n\nIf neither `location` nor `path` is provided, `contents` must be\nnon-null.  The implementation must assign a unique identifier for the\n`location` field.  When the file is staged as input to CommandLineTool,\nthe value of `contents` must be written to a file.\n\nIf `contents` is set as a result of a Javascript expression,\nan `entry` in `InitialWorkDirRequirement`, or read in from\n`cwl.output.json`, there is no specified upper limit on the\nsize of `contents`.  Implementations may have practical limits\non the size of `contents` based on memory and storage\navailable to the workflow runner or other factors.\n\nIf the `loadContents` field of an `InputParameter` or\n`OutputParameter` is true, and the input or output File object\n`location` is valid, the file must be a UTF-8 text file 64 KiB\nor smaller, and the implementation must read the entire\ncontents of the file and place it in the `contents` field.  If\nthe size of the file is greater than 64 KiB, the\nimplementation must raise a fatal error.",
                    "type": "string"
                },
                "dirname": {
                    "description": "The name of the directory containing file, that is, the path leading up\nto the final slash in the path such that `dirname + '/' + basename ==\npath`.\n\nThe implementation must set this field based on the value of `path`\nprior to evaluating parameter references or expressions in a\nCommandLineTool document.  This field must not be used in any other\ncontext.",
                    "type": "string"
                },
                "format": {
                    "description": "The format of the file: this must be an IRI of a concept node that\nrepresents the file format, preferably defined within an ontology.\nIf no ontology is available, file formats may be tested by exact match.\n\nReasoning about format compatibility must be done by checking that an\ninput file format is the same, `owl:equivalentClass` or\n`rdfs:subClassOf` the format required by the input parameter.\n`owl:equivalentClass` is transitive with `rdfs:subClassOf`, e.g. if\n`<B> owl:equivalentClass <C>` and `<B> owl:subclassOf <A>` then infer\n`<C> owl:subclassOf <A>`.\n\nFile format ontologies may be provided in the \"$schemas\" metadata at the\nroot of the document.  If no ontologies are specified in `$schemas`, the\nruntime may perform exact file format matches.",
                    "type": "string"
                },
                "location": {
                    "description": "An IRI that identifies the file resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource; the\nimplementation must use the IRI to retrieve file content.  If an\nimplementation is unable to retrieve the file content stored at a\nremote resource (due to unsupported protocol, access denied, or other\nissue) it must signal an error.\n\nIf the `location` field is not provided, the `contents` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.",
                    "type": "string"
                },
                "nameext": {
                    "description": "The basename extension such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  Leading periods on the basename are ignored; a basename of\n`.cshrc` will have an empty `nameext`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.",
                    "type": "string"
                },
                "nameroot": {
                    "description": "The basename root such that `nameroot + nameext == basename`, and\n`nameext` is empty or begins with a period and contains at most one\nperiod.  For the purposes of path splitting leading periods on the\nbasename are ignored; a basename of `.cshrc` will have a nameroot of\n`.cshrc`.\n\nThe implementation must set this field automatically based on the value\nof `basename` prior to evaluating parameter references or expressions.",
                    "type": "string"
                },
                "path": {
                    "description": "The local host path where the File is available when a CommandLineTool is\nexecuted.  This field must be set by the implementation.  The final\npath component must match the value of `basename`.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to access the file at `path` using the POSIX\n`open(2)` syscall.\n\nAs a special case, if the `path` field is provided but the `location`\nfield is not, an implementation may assign the value of the `path`\nfield to `location`, and remove the `path` field.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.",
                    "type": "string"
                },
                "secondaryFiles": {
                    "description": "A list of additional files or directories that are associated with the\nprimary file and must be transferred alongside the primary file.\nExamples include indexes of the primary file, or external references\nwhich must be included when loading primary document.  A file object\nlisted in `secondaryFiles` may itself include `secondaryFiles` for\nwhich the same rules apply.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/File"
                            },
                            {
                                "$ref": "#/definitions/Directory"
                            }
                        ]
                    },
                    "type": "array"
                },
                "size": {
                    "description": "Optional file size (in bytes)",
                    "type": "number"
                }
            },
            "required": [
                "class"
            ],
            "type": "object"
        },
        "Directory": {
            "additionalProperties": false,
            "description": "Represents a directory to present to a command line tool.\n\nDirectories are represented as objects with `class` of `Directory`.  Directory objects have\na number of properties that provide metadata about the directory.\n\nThe `location` property of a Directory is a URI that uniquely identifies\nthe directory.  Implementations must support the file:// URI scheme and may\nsupport other schemes such as http://.  Alternately to `location`,\nimplementations must also accept the `path` property on Directory, which\nmust be a filesystem path available on the same host as the CWL runner (for\ninputs) or the runtime environment of a command line tool execution (for\ncommand line tool outputs).\n\nA Directory object may have a `listing` field.  This is a list of File and\nDirectory objects that are contained in the Directory.  For each entry in\n`listing`, the `basename` property defines the name of the File or\nSubdirectory when staged to disk.  If `listing` is not provided, the\nimplementation must have some way of fetching the Directory listing at\nruntime based on the `location` field.\n\nIf a Directory does not have `location`, it is a Directory literal.  A\nDirectory literal must provide `listing`.  Directory literals must be\ncreated on disk at runtime as needed.\n\nThe resources in a Directory literal do not need to have any implied\nrelationship in their `location`.  For example, a Directory listing may\ncontain two files located on different hosts.  It is the responsibility of\nthe runtime to ensure that those files are staged to disk appropriately.\nSecondary files associated with files in `listing` must also be staged to\nthe same Directory.\n\nWhen executing a CommandLineTool, Directories must be recursively staged\nfirst and have local values of `path` assigned.\n\nDirectory objects in CommandLineTool output must provide either a\n`location` URI or a `path` property in the context of the tool execution\nruntime (local to the compute node, or within the executing container).\n\nAn ExpressionTool may forward file references from input to output by using\nthe same value for `location`.\n\nName conflicts (the same `basename` appearing multiple times in `listing`\nor in any entry in `secondaryFiles` in the listing) is a fatal error.",
            "properties": {
                "basename": {
                    "description": "The base name of the directory, that is, the name of the file without any\nleading directory path.  The base name must not contain a slash `/`.\n\nIf not provided, the implementation must set this field based on the\n`location` field by taking the final path component after parsing\n`location` as an IRI.  If `basename` is provided, it is not required to\nmatch the value from `location`.\n\nWhen this file is made available to a CommandLineTool, it must be named\nwith `basename`, i.e. the final component of the `path` field must match\n`basename`.",
                    "type": "string"
                },
                "class": {
                    "const": "Directory",
                    "description": "Must be `Directory` to indicate this object describes a Directory.",
                    "type": "string"
                },
                "listing": {
                    "description": "List of files or subdirectories contained in this directory.  The name\nof each file or subdirectory is determined by the `basename` field of\neach `File` or `Directory` object.  It is an error if a `File` shares a\n`basename` with any other entry in `listing`.  If two or more\n`Directory` object share the same `basename`, this must be treated as\nequivalent to a single subdirectory with the listings recursively\nmerged.",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/File"
                            },
                            {
                                "$ref": "#/definitions/Directory"
                            }
                        ]
                    },
                    "type": "array"
                },
                "location": {
                    "description": "An IRI that identifies the directory resource.  This may be a relative\nreference, in which case it must be resolved using the base IRI of the\ndocument.  The location may refer to a local or remote resource.  If\nthe `listing` field is not set, the implementation must use the\nlocation IRI to retrieve directory listing.  If an implementation is\nunable to retrieve the directory listing stored at a remote resource (due to\nunsupported protocol, access denied, or other issue) it must signal an\nerror.\n\nIf the `location` field is not provided, the `listing` field must be\nprovided.  The implementation must assign a unique identifier for\nthe `location` field.\n\nIf the `path` field is provided but the `location` field is not, an\nimplementation may assign the value of the `path` field to `location`,\nthen follow the rules above.",
                    "type": "string"
                },
                "path": {
                    "description": "The local path where the Directory is made available prior to executing a\nCommandLineTool.  This must be set by the implementation.  This field\nmust not be used in any other context.  The command line tool being\nexecuted must be able to access the directory at `path` using the POSIX\n`opendir(2)` syscall.\n\nIf the `path` contains [POSIX shell metacharacters](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02)\n(`|`,`&`, `;`, `<`, `>`, `(`,`)`, `$`,`` ` ``, `\\`, `\"`, `'`,\n`<space>`, `<tab>`, and `<newline>`) or characters\n[not allowed](http://www.iana.org/assignments/idna-tables-6.3.0/idna-tables-6.3.0.xhtml)\nfor [Internationalized Domain Names for Applications](https://tools.ietf.org/html/rfc6452)\nthen implementations may terminate the process with a\n`permanentFailure`.",
                    "type": "string"
                }
            },
            "required": [
                "class"
            ],
            "type": "object"
        },
        "Any": {
            "description": "A placeholder for any type of CWL object.",
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "integer"
                },
                {
                    "type": "number"
                },
                {
                    "type": "string"
                },
                {
                    "type": "array"
                },
                {
                    "type": "object"
                },
                {
                    "$ref": "#/definitions/File"
                },
                {
                    "$ref": "#/definitions/Directory"
                }
            ],
            "properties": {
                "format": true,
                "size": true,
                "listing": true,
                "checksum": true,
                "nameroot": true,
                "contents": true,
                "location": true,
                "path": true,
                "dirname": true,
                "nameext": true,
                "secondaryFiles": true,
                "class": true,
                "basename": true
            }
        }
    },
    "description": "Auto-generated class implementation for https://w3id.org/cwl/cwl#WorkflowInputParameter",
    "type": "object"
}